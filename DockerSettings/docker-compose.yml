version: '3.8'
    
services:
  
  cache:
    image: redis
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - cache:/data
        
  mongoDb:
    image: mongo
    container_name: mongo_container
    ports:
      - "27017:27017"
  
  zookeeper:
    image: bitnami/zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    restart: always

  kafka:
    image: bitnami/kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    restart: always
  
  init-kafka:
    image: bitnami/kafka
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics.sh --create --topic analyze_results --bootstrap-server kafka:9092 --replication-factor 1 --partitions 4
      kafka-topics.sh --create --topic messages_to_analyze --bootstrap-server kafka:9092 --replication-factor 1 --partitions 4
      "
      
  postgres:
    image: postgres:13.3
    environment:
      POSTGRES_DB: "course_db"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    ports:
      - "5432:5432"
      
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./etc/prometheus/:/etc/prometheus/
      - ./data/prometheus/:/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    
networks:
  kafka-net:
    driver: bridge
    
volumes:
  cache:
    driver: local